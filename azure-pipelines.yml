trigger:
  branches:
    include:
      - main

pool:
  name: 'Docker-App'

variables:
  imageName: 'mirzzie/docker-app'               # Docker Hub repository
  containerName: 'sampleapp'                    # Name of the Docker container on AWS
  serverUser: 'ubuntu'                          # SSH username for AWS server
  dockerServerIp: '13.203.78.251'       # Replace with your actual Docker server IP
  pipelineServerIp: '65.1.94.55'   # Replace with your actual Pipeline agent server IP
  privateKey: $(Key)                            # Private key for SSH authentication (securely stored in pipeline variables)

stages:
  - stage: Build
    displayName: 'Build and Push Docker Image'
    jobs:
      - job: Build
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'DockerRegistry'  # Reference the service connection by name
              command: build
              repository: $(imageName)
              Dockerfile: '**/Dockerfile'
              tags: |
                $(Build.BuildId)

          - task: Docker@2
            inputs:
              containerRegistry: 'DockerHub'  # Reference the service connection by name
              command: push
              repository: $(imageName)
              tags: |
                $(Build.BuildId)

  - stage: Deploy
    displayName: 'Deploy to AWS Docker Application EC2'
    jobs:
      - job: Deploy
        steps:
          - script: |
              echo "Deploying to AWS Docker Application Server..."
              
              # Create SSH key file
              echo "$(privateKey)" > ~/.ssh/aws_key
              chmod 600 ~/.ssh/aws_key

              # Add the Docker server's host key to known_hosts to avoid SSH verification issues
              ssh-keyscan -H $(dockerServerIp) >> ~/.ssh/known_hosts

              # SSH into the Docker server and pull the latest Docker image, then restart the container
              ssh -i ~/.ssh/aws_key $(serverUser)@$(dockerServerIp) << 'EOF'
                docker stop $(containerName) || true
                docker rm $(containerName) || true
                docker pull $(imageName):$(Build.BuildId)
                docker run -d --name $(containerName) -p 80:80 $(imageName):$(Build.BuildId)
              EOF
            displayName: 'Deploy Docker Container to AWS Docker Application EC2'
